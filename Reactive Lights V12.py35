try:
    import keyboard
    import pyaudio
    import win32gui
    import win32con
    import numpy as np
    from logipy import logi_led
    import TimeDelta
    import time
    import functools
    import CMath as cm
    print = functools.partial(print, flush=True)
except ImportError as e:
    print('Couldn\'t load module {}'.format(e))

AutoMul = 1  # Enable auto min multiplitcation
AutoMulVal = 0.5
ResetMul = 2.5  # Default to reset mul to when gets set to 0

HideWindow = 0
if HideWindow == 1:
    WindowHide = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(WindowHide, win32con.SW_HIDE)

redKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

greenKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0]

blueKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

loop = 0
multiplication = 2.5
timeit = []
CHUNKSIZE = 2048
device = 2
bright = (255, 255, 255)
quietTimer = 22
quiet = 0


kbArrayLeft = ['0', 0xFFFF1, 0xFFFF2, 0xFFF1, 0xFFF2, 0xFFF3, 0xFFF4, 0xFFF5,
               '1', 0x01, 0x29, 0x0f, 0x3a, 0x2a, 0x1d, '2', 0x02, 0x10, 0x1e,
               0x2c, 0x15b, '3', 0xFFF6, 0x3b, 0x03, 0x11, 0x1f, 0x2d, 0x38,
               '4', 0xFFF7, 0x3c, 0x04, 0x12, 0x20, 0x2e, '5', 0xFFF8, 0x3d,
               0x05, 0x13, 0x21, 0x2f, '6', 0xFFF9, 0x3e, 0x06, 0x14, 0x22,
               0x30, 0x39, '7', 0x07, 0x15, 0x23, 0x31, '8', 0x3f, 0x08, 0x16,
               0x24, 0x32, '9', 0x40, 0x09, 0x17, 0x25, 0x33, 0x138, '10',
               0x41, 0x0a, 0x18, 0x26, 0x34, 0x15c, '11', 0x42, 0x0b, 0x19,
               0x27, 0x35, 0x15d, '12', 0x43, 0x0c, 0x1a, 0x28, '13', 0x44,
               0x0d, 0x1b, 0x36, '14', 0x57, 0x58, 0x0e, 0x2b, 0x1c, 0x11d,
               '15', 0x137, 0x152, 0x153, 0x14b, '16', 0x46, 0x147, 0x14f,
               0x148, 0x150, '17', 0x145, 0x149, 0x151, 0x14d, '18', 0x45,
               0x47, 0x4b, 0x4f, 0x52, '19', 0x135, 0x48, 0x4c, 0x50, '20',
               0x37, 0x49, 0x4d, 0x51, 0x53, '21', 0x4a, 0x4e, 0x11c]

logi_led.logi_led_init()
time.sleep(1)  # Give the SDK a second to initialize
logi_led.logi_led_save_current_lighting()  # Save the current lighting


while True:  # Infinite Loop
    try:
        start = TimeDelta.start()
        if loop == 1000:
            # outliers = []
            # timeit, outliers = cm.outliers(timeit)
            timeit = [x for x in timeit if 0 <= x <= 0.75]
            print('Mean:', round(np.mean(timeit), 16), 'Hertz:',
                  round(1 / np.mean(timeit), 15), len(timeit))
            loop = 0
            timeit = []
        # Used to end the program with Ctrl+Shift+F20
        if keyboard.is_pressed('shift+F20') is True and keyboard.is_pressed('ctrl+F20') is True and keyboard.is_pressed('alt+F20') is False:
            time.sleep(0.1)
            # Sets the color to the specified color
            logi_led.logi_led_set_lighting_for_key_with_key_name(
                0xFFFF2, 0, 0, 0)
            time.sleep(0.4)
            logi_led.logi_led_restore_lighting()
            logi_led.logi_led_shutdown()
            stream.stop_stream()
            stream.close()
            p.terminate()
            # Shows the window when called
            if HideWindow == 1:
                win32gui.ShowWindow(WindowHide, win32con.SW_SHOW)
            exit()

        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paInt32,
                        channels=2,
                        rate=66150,
                        input=True,
                        frames_per_buffer=CHUNKSIZE,
                        input_device_index=device)
        data = stream.read(CHUNKSIZE)
        numpydata = np.frombuffer(data, dtype=np.int16)

        RAudio = numpydata[:1365]
        GAudio = numpydata[1366:2730]
        BAudio = numpydata[2731:4095]

        if multiplication == 0:
            multiplication = ResetMul

        r = round(abs(np.mean(RAudio))) * multiplication
        g = round(abs(np.mean(GAudio))) * multiplication
        b = round(abs(np.mean(BAudio))) * multiplication

        if r > bright[0]:
            red = bright[0]
        else:
            red = r
        if g > bright[1]:
            green = bright[1]
        else:
            green = g
        if b > bright[2]:
            blue = bright[2]
        else:
            blue = b

        if red == 0 and blue == 0 and green == 0:
            if quiet > quietTimer + 4:
                time.sleep(1)
                continue
            else:
                # Adds one to the countdown if less then quietTimer + 4
                quiet += 1

            if quiet > quietTimer:
                if quiet == quietTimer + 1:
                    time.sleep(0.05)
                    logi_led.logi_led_restore_lighting()
                    redKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

                    greenKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0]

                    blueKbArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                    multiplication = multiplication - (quietTimer * AutoMulVal)
                    continue  # Skips the rest of the while loop
                time.sleep(0.1)
                continue  # Skips the rest of the while loop
            # else:
            #     time.sleep(0.1)

        else:  # if audio has started again
            quiet = 0  # Resets the countdown

        kbRed = red / 2.55
        kbGreen = green / 2.55
        kbBlue = blue / 2.55

        redKbArray.insert(0, kbRed)
        greenKbArray.insert(0, kbGreen)
        blueKbArray.insert(0, kbBlue)

        if AutoMul == 1:
            if (np.mean(redKbArray[:7]) >= 75 and
               np.mean(blueKbArray[:7]) >= 75 and
               np.mean(greenKbArray[:7]) >= 75):
                multiplication = round(multiplication - AutoMulVal, 2)
                print('-', multiplication)

            if (np.mean(redKbArray[:7]) <= 20 and
                np.mean(blueKbArray[:7]) <= 20 and
                    np.mean(greenKbArray[:7]) <= 20):
                multiplication = round(multiplication + AutoMulVal, 2)
                print('+', multiplication)

            if multiplication < 0:
                multiplication = abs(multiplication)

        redKbArray = redKbArray[:177]
        greenKbArray = greenKbArray[:177]
        blueKbArray = blueKbArray[:117]
        for key in kbArrayLeft:
            if type(key) == str:
                location = int(key)
            else:
                logi_led.logi_led_set_lighting_for_key_with_key_name(
                    key,
                    int(redKbArray[location]),
                    int(greenKbArray[location]),
                    int(blueKbArray[location]))

        loop += 1
        timeit.append(TimeDelta.sEnd(start))
    except KeyboardInterrupt:
        print(multiplication)
        userInp = input('>>>')
        inp = userInp.split()

        if len(inp) > 0:
            if inp[0].lower() == 'mul':
                try:
                    multiplication = float(inp[1])
                except ValueError:
                    print('Error, please try again')
                print('New multiplication value:', multiplication)
                del inp[0]
                del inp[0]

            elif inp[0].lower() == 'mulval':
                print('mulval')
                try:
                    AutoMulVal = float(inp[1])
                except ValueError:
                    print('Error, please try again')
                print('Changed multiplication value:', AutoMulVal)
                del inp[0]
                del inp[0]

            elif inp[0].lower() == 'togmul':
                print('Toggled auto multiplication value changer.')
                if AutoMul == 1:
                    AutoMul = 0
                elif AutoMul == 0:
                    AutoMul = 1

# Akon & Matoma Stick around

# Make G6-g9 a binary counter for mul val
# Make green channel normal value and have red as a backup incase the value gets too high
# Make blue decimal value
